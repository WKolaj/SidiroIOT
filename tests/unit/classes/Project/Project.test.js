const Project = require("../../../../classes/Project/Project");

describe("Project", () => {
  describe("validatePayload", () => {
    let payload;

    beforeEach(() => {
      payload = {
        connectableDevices: {
          device1ID: {
            id: "device1ID",
            name: "device1Name",
            type: "MBDevice",
            variables: {
              testVariable1ID: {
                id: "testVariable1ID",
                name: "testVariable1Name",
                type: "MBSwappedFloat",
                unit: "FakeUnit",
                sampleTime: 1,
                defaultValue: 123.456,
                offset: 1,
                length: 2,
                read: true,
                write: false,
                readFCode: 3,
                writeFCode: 16,
                unitID: 1,
                readAsSingle: false,
                writeAsSingle: false,
              },
              testVariable2ID: {
                id: "testVariable2ID",
                name: "testVariable2Name",
                type: "MBSwappedFloat",
                unit: "FakeUnit",
                sampleTime: 1,
                defaultValue: 321.654,
                offset: 3,
                length: 2,
                read: true,
                write: false,
                readFCode: 3,
                writeFCode: 16,
                unitID: 1,
                readAsSingle: false,
                writeAsSingle: false,
              },
              testVariable3ID: {
                id: "testVariable3ID",
                name: "testVariable3Name",
                type: "MBSwappedFloat",
                unit: "FakeUnit",
                sampleTime: 1,
                defaultValue: 789.654,
                offset: 5,
                length: 2,
                read: true,
                write: false,
                readFCode: 3,
                writeFCode: 16,
                unitID: 1,
                readAsSingle: false,
                writeAsSingle: false,
              },
              testVariable4ID: {
                id: "testVariable4ID",
                name: "testVariable4Name",
                type: "MBSwappedFloat",
                unit: "FakeUnit",
                sampleTime: 1,
                defaultValue: 123.456,
                offset: 1,
                length: 2,
                read: true,
                write: false,
                readFCode: 3,
                writeFCode: 16,
                unitID: 2,
                readAsSingle: false,
                writeAsSingle: false,
              },
              testVariable5ID: {
                id: "testVariable5ID",
                name: "testVariable5Name",
                type: "MBSwappedFloat",
                unit: "FakeUnit",
                sampleTime: 1,
                defaultValue: 321.654,
                offset: 3,
                length: 2,
                read: true,
                write: false,
                readFCode: 3,
                writeFCode: 16,
                unitID: 2,
                readAsSingle: false,
                writeAsSingle: false,
              },
              testVariable6ID: {
                id: "testVariable6ID",
                name: "testVariable6Name",
                type: "MBSwappedFloat",
                unit: "FakeUnit",
                sampleTime: 1,
                defaultValue: 789.654,
                offset: 5,
                length: 2,
                read: true,
                write: false,
                readFCode: 3,
                writeFCode: 16,
                unitID: 2,
                readAsSingle: false,
                writeAsSingle: false,
              },
              testVariable7ID: {
                id: "testVariable7ID",
                name: "testVariable7Name",
                type: "MBSwappedFloat",
                unit: "FakeUnit",
                sampleTime: 1,
                defaultValue: 123.456,
                offset: 1,
                length: 2,
                read: true,
                write: false,
                readFCode: 3,
                writeFCode: 16,
                unitID: 3,
                readAsSingle: false,
                writeAsSingle: false,
              },
              testVariable8ID: {
                id: "testVariable8ID",
                name: "testVariable8Name",
                type: "MBSwappedFloat",
                unit: "FakeUnit",
                sampleTime: 1,
                defaultValue: 321.654,
                offset: 3,
                length: 2,
                read: true,
                write: false,
                readFCode: 3,
                writeFCode: 16,
                unitID: 3,
                readAsSingle: false,
                writeAsSingle: false,
              },
              testVariable9ID: {
                id: "testVariable9ID",
                name: "testVariable9Name",
                type: "MBSwappedFloat",
                unit: "FakeUnit",
                sampleTime: 1,
                defaultValue: 789.654,
                offset: 5,
                length: 2,
                read: true,
                write: false,
                readFCode: 3,
                writeFCode: 16,
                unitID: 3,
                readAsSingle: false,
                writeAsSingle: false,
              },
            },
            calcElements: {},
            alerts: {},
            isActive: true,
            ipAddress: "192.168.10.100",
            portNumber: 502,
            timeout: 500,
          },

          device2ID: {
            id: "device2ID",
            name: "device2Name",
            type: "MBDevice",
            variables: {
              testVariable1ID: {
                id: "testVariable1ID",
                name: "testVariable1Name",
                type: "MBSwappedFloat",
                unit: "FakeUnit",
                sampleTime: 1,
                defaultValue: 123.456,
                offset: 1,
                length: 2,
                read: true,
                write: false,
                readFCode: 3,
                writeFCode: 16,
                unitID: 1,
                readAsSingle: false,
                writeAsSingle: false,
              },
              testVariable2ID: {
                id: "testVariable2ID",
                name: "testVariable2Name",
                type: "MBSwappedFloat",
                unit: "FakeUnit",
                sampleTime: 1,
                defaultValue: 321.654,
                offset: 3,
                length: 2,
                read: true,
                write: false,
                readFCode: 3,
                writeFCode: 16,
                unitID: 1,
                readAsSingle: false,
                writeAsSingle: false,
              },
              testVariable3ID: {
                id: "testVariable3ID",
                name: "testVariable3Name",
                type: "MBSwappedFloat",
                unit: "FakeUnit",
                sampleTime: 1,
                defaultValue: 789.654,
                offset: 5,
                length: 2,
                read: true,
                write: false,
                readFCode: 3,
                writeFCode: 16,
                unitID: 1,
                readAsSingle: false,
                writeAsSingle: false,
              },
            },
            calcElements: {},
            alerts: {},
            isActive: true,
            ipAddress: "192.168.10.100",
            portNumber: 503,
            timeout: 500,
          },
        },
        internalDevices: {},
        agentDevices: {},
      };
    });

    let exec = () => {
      return Project.validatePayload(payload);
    };

    it("should return null if payload is valid", () => {
      let result = exec();

      expect(result).toEqual(null);
    });

    it("should return message if connectableDevices is not defined", () => {
      delete payload.connectableDevices;

      let result = exec();

      expect(result).toEqual(`"connectableDevices" is required`);
    });

    it("should return message if connectableDevices is null", () => {
      payload.connectableDevices = null;

      let result = exec();

      expect(result).toEqual(`"connectableDevices" cannot be null`);
    });

    it("should return message if one of connectableDevice payload is invalid - id different than id inside payload", () => {
      payload.connectableDevices.device1ID = {
        id: "device99ID",
        name: "device1Name",
        type: "MBDevice",
        variables: {
          testVariable1ID: {
            id: "testVariable1ID",
            name: "testVariable1Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 123.456,
            offset: 1,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 1,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable2ID: {
            id: "testVariable2ID",
            name: "testVariable2Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 321.654,
            offset: 3,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 1,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable3ID: {
            id: "testVariable3ID",
            name: "testVariable3Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 789.654,
            offset: 5,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 1,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable4ID: {
            id: "testVariable4ID",
            name: "testVariable4Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 123.456,
            offset: 1,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 2,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable5ID: {
            id: "testVariable5ID",
            name: "testVariable5Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 321.654,
            offset: 3,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 2,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable6ID: {
            id: "testVariable6ID",
            name: "testVariable6Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 789.654,
            offset: 5,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 2,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable7ID: {
            id: "testVariable7ID",
            name: "testVariable7Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 123.456,
            offset: 1,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 3,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable8ID: {
            id: "testVariable8ID",
            name: "testVariable8Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 321.654,
            offset: 3,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 3,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable9ID: {
            id: "testVariable9ID",
            name: "testVariable9Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 789.654,
            offset: 5,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 3,
            readAsSingle: false,
            writeAsSingle: false,
          },
        },
        calcElements: {},
        alerts: {},
        isActive: true,
        ipAddress: "192.168.10.100",
        portNumber: 502,
        timeout: 500,
      };

      let result = exec();

      expect(result).toEqual(
        `connectable device's id as key and in payload differ!`
      );
    });

    it("should return message if one of connectableDevices payload is invalid - MBDevice", () => {
      //invalid default value of one of variables
      payload.connectableDevices.device1ID = {
        id: "device99ID",
        name: "device1Name",
        type: "MBDevice",
        variables: {
          testVariable1ID: {
            id: "testVariable1ID",
            name: "testVariable1Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: "testFakeValue",
            offset: 1,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 1,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable2ID: {
            id: "testVariable2ID",
            name: "testVariable2Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 321.654,
            offset: 3,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 1,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable3ID: {
            id: "testVariable3ID",
            name: "testVariable3Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 789.654,
            offset: 5,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 1,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable4ID: {
            id: "testVariable4ID",
            name: "testVariable4Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 123.456,
            offset: 1,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 2,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable5ID: {
            id: "testVariable5ID",
            name: "testVariable5Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 321.654,
            offset: 3,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 2,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable6ID: {
            id: "testVariable6ID",
            name: "testVariable6Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 789.654,
            offset: 5,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 2,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable7ID: {
            id: "testVariable7ID",
            name: "testVariable7Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 123.456,
            offset: 1,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 3,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable8ID: {
            id: "testVariable8ID",
            name: "testVariable8Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 321.654,
            offset: 3,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 3,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable9ID: {
            id: "testVariable9ID",
            name: "testVariable9Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 789.654,
            offset: 5,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 3,
            readAsSingle: false,
            writeAsSingle: false,
          },
        },
        calcElements: {},
        alerts: {},
        isActive: true,
        ipAddress: "192.168.10.100",
        portNumber: 502,
        timeout: 500,
      };

      let result = exec();

      expect(result).toEqual(`"defaultValue" must be a number`);
    });

    it("should return message if one of connectableDevice types is not recognized", () => {
      payload.connectableDevices.device1ID = {
        id: "device1ID",
        name: "device1Name",
        type: "FakeDevice",
        variables: {
          testVariable1ID: {
            id: "testVariable1ID",
            name: "testVariable1Name",
            type: "MBFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 123.321,
            offset: 1,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 1,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable2ID: {
            id: "testVariable2ID",
            name: "testVariable2Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 321.654,
            offset: 3,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 1,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable3ID: {
            id: "testVariable3ID",
            name: "testVariable3Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 789.654,
            offset: 5,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 1,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable4ID: {
            id: "testVariable4ID",
            name: "testVariable4Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 123.456,
            offset: 1,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 2,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable5ID: {
            id: "testVariable5ID",
            name: "testVariable5Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 321.654,
            offset: 3,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 2,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable6ID: {
            id: "testVariable6ID",
            name: "testVariable6Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 789.654,
            offset: 5,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 2,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable7ID: {
            id: "testVariable7ID",
            name: "testVariable7Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 123.456,
            offset: 1,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 3,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable8ID: {
            id: "testVariable8ID",
            name: "testVariable8Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 321.654,
            offset: 3,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 3,
            readAsSingle: false,
            writeAsSingle: false,
          },
          testVariable9ID: {
            id: "testVariable9ID",
            name: "testVariable9Name",
            type: "MBSwappedFloat",
            unit: "FakeUnit",
            sampleTime: 1,
            defaultValue: 789.654,
            offset: 5,
            length: 2,
            read: true,
            write: false,
            readFCode: 3,
            writeFCode: 16,
            unitID: 3,
            readAsSingle: false,
            writeAsSingle: false,
          },
        },
        calcElements: {},
        alerts: {},
        isActive: true,
        ipAddress: "192.168.10.100",
        portNumber: 502,
        timeout: 500,
      };

      let result = exec();

      expect(result).toEqual(`connectable device type not recognized`);
    });

    it("should return message if internalDevices is not defined", () => {
      delete payload.internalDevices;

      let result = exec();

      expect(result).toEqual(`"internalDevices" is required`);
    });

    it("should return message if internalDevices is null", () => {
      payload.internalDevices = null;

      let result = exec();

      expect(result).toEqual(`"internalDevices" cannot be null`);
    });

    //TODO - add tests for types of internalDevices

    it("should return message if agentDevices is not defined", () => {
      delete payload.agentDevices;

      let result = exec();

      expect(result).toEqual(`"agentDevices" is required`);
    });

    it("should return message if agentDevices is null", () => {
      payload.agentDevices = null;

      let result = exec();

      expect(result).toEqual(`"agentDevices" cannot be null`);
    });

    //TODO - add tests for types of alerts
  });
});
